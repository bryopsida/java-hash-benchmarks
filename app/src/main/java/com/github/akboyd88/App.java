/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package com.github.akboyd88;

import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Random;
import java.util.Map.Entry;

import org.apache.commons.codec.digest.DigestUtils;
import org.apache.commons.codec.digest.MessageDigestAlgorithms;

public class App {

    

    public static void main(String[] args) throws NoSuchAlgorithmException {
        Random random = new Random();

        List<String> hashingAlgorithm = List.of("MD2", "MD5", "SHA-1", "SHA-224", "SHA-256", "SHA-384", "SHA-512", "SHA-512/224", "SHA-512/256");

        Map<String, Stats> stats = new HashMap<>();

        for(String value : MessageDigestAlgorithms.values()){
            Stats s = new Stats();
            stats.put("AC_" + value, s);
            for(int i = 0; i<100000; i++){
                byte[] array = new byte[256];
                random.nextBytes(array);
                long startTime = System.nanoTime();
                CommonsHash(value, array);
                long stopTime = System.nanoTime();
                s.addTime(stopTime-startTime);
            }
        }

        for(String value : hashingAlgorithm){
            Stats s = new Stats();
            stats.put("SEC_" + value, s);
            for(int i = 0; i<100000; i++){
                byte[] array = new byte[256];
                random.nextBytes(array);
                long startTime = System.nanoTime();
                SecurityHash(value, array);
                long stopTime = System.nanoTime();
                s.addTime(stopTime-startTime);
            }
        }

        for(Entry<String, Stats> entry : stats.entrySet()){
            System.out.println(String.format("Average duration for %s is %s nanoseconds", entry.getKey(), entry.getValue().getMean()));
        }
        
    }


    public static void SecurityHash(String hashingAlgorithm, byte[] contentToHash) throws NoSuchAlgorithmException{
        MessageDigest md = MessageDigest.getInstance(hashingAlgorithm);
        md.update(contentToHash);
        md.digest();
    }

    public static void CommonsHash(String hashingAlgorithm, byte[] contentToHash) {
        DigestUtils.digest(DigestUtils.getDigest(hashingAlgorithm), contentToHash);
    }
}


